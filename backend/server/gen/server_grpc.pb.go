// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: backend/server/proto/server.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MemeServer_GetMeme_FullMethodName = "/MemeServer/GetMeme"
	MemeServer_SetMeme_FullMethodName = "/MemeServer/SetMeme"
)

// MemeServerClient is the client API for MemeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemeServerClient interface {
	GetMeme(ctx context.Context, in *GetMemeRequest, opts ...grpc.CallOption) (*GetMemeResponse, error)
	SetMeme(ctx context.Context, in *SetMemeRequest, opts ...grpc.CallOption) (*SetMemeResponse, error)
}

type memeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMemeServerClient(cc grpc.ClientConnInterface) MemeServerClient {
	return &memeServerClient{cc}
}

func (c *memeServerClient) GetMeme(ctx context.Context, in *GetMemeRequest, opts ...grpc.CallOption) (*GetMemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemeResponse)
	err := c.cc.Invoke(ctx, MemeServer_GetMeme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memeServerClient) SetMeme(ctx context.Context, in *SetMemeRequest, opts ...grpc.CallOption) (*SetMemeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMemeResponse)
	err := c.cc.Invoke(ctx, MemeServer_SetMeme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemeServerServer is the server API for MemeServer service.
// All implementations must embed UnimplementedMemeServerServer
// for forward compatibility.
type MemeServerServer interface {
	GetMeme(context.Context, *GetMemeRequest) (*GetMemeResponse, error)
	SetMeme(context.Context, *SetMemeRequest) (*SetMemeResponse, error)
	mustEmbedUnimplementedMemeServerServer()
}

// UnimplementedMemeServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemeServerServer struct{}

func (UnimplementedMemeServerServer) GetMeme(context.Context, *GetMemeRequest) (*GetMemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeme not implemented")
}
func (UnimplementedMemeServerServer) SetMeme(context.Context, *SetMemeRequest) (*SetMemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMeme not implemented")
}
func (UnimplementedMemeServerServer) mustEmbedUnimplementedMemeServerServer() {}
func (UnimplementedMemeServerServer) testEmbeddedByValue()                    {}

// UnsafeMemeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemeServerServer will
// result in compilation errors.
type UnsafeMemeServerServer interface {
	mustEmbedUnimplementedMemeServerServer()
}

func RegisterMemeServerServer(s grpc.ServiceRegistrar, srv MemeServerServer) {
	// If the following call pancis, it indicates UnimplementedMemeServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemeServer_ServiceDesc, srv)
}

func _MemeServer_GetMeme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeServerServer).GetMeme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemeServer_GetMeme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeServerServer).GetMeme(ctx, req.(*GetMemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemeServer_SetMeme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeServerServer).SetMeme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemeServer_SetMeme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeServerServer).SetMeme(ctx, req.(*SetMemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemeServer_ServiceDesc is the grpc.ServiceDesc for MemeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MemeServer",
	HandlerType: (*MemeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeme",
			Handler:    _MemeServer_GetMeme_Handler,
		},
		{
			MethodName: "SetMeme",
			Handler:    _MemeServer_SetMeme_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/server/proto/server.proto",
}
